const { readdirSync, readFileSync, writeFileSync, statSync } = require("fs");
const { join, extname, basename } = require("path");
const { markdown } = require("markdown");
const mime = require("mime-types");

const EXAMPLES_PATH = join(__dirname, "..", "..", "examples");

const PRIVATE_EXAMPLES_DIR_NAMES = require("../../examples.config").private;

const PAGES_PATH = join(__dirname, "..", "pages");
const EXAMPLES_OUTPUT_PATH = join(__dirname, "..", "examples.js");
const EXAMPLES_FILE_SYSTEM_PATHS = readdirSync(EXAMPLES_PATH).filter((f) =>
  statSync(join(EXAMPLES_PATH, f)).isDirectory()
);
const AUTOMATICALLY_GENERATED_HEADER = `/**
* THIS FILE IS AUTOMATICALLY GENERATED.
*/`;

function generatePages() {
  EXAMPLES_FILE_SYSTEM_PATHS.forEach(generatePage);
}

function generateExamplesIndex() {
  const exampleIndex = parseExamples();

  const content = `${AUTOMATICALLY_GENERATED_HEADER}

export default ${JSON.stringify(exampleIndex, null, 2)};
`;

  writeFileSync(EXAMPLES_OUTPUT_PATH, content);
}

function parseExamples() {
  return EXAMPLES_FILE_SYSTEM_PATHS.map(parseExample);
}

function generatePage(fileSystemPath) {
  const { title, name, fileInfo } = parseExample(fileSystemPath);

  const content = `${AUTOMATICALLY_GENERATED_HEADER}

import * as hooks from "../../examples/${fileSystemPath}";
import Example from "../components/example/show";

export default (props) => (
  <Example
    key="${name}"
    name="${name}"
    fileName="${fileInfo.name}"
    title="${title}"
    hooks={hooks}
    {...props}
  />
);
`;

  writeFileSync(join(PAGES_PATH, `${name}.js`), content);
}

function parseExample(fileSystemPath) {
  const [title, description] =
    extractTitleAndDescriptionFromReadme(fileSystemPath);

  let pathSegments = fileSystemPath.split("-");

  pathSegments.shift();

  const name = pathSegments.join("-");

  const dirname = join(EXAMPLES_PATH, fileSystemPath);

  let icon = null;

  try {
    icon = readFileSync(join(dirname, "icon.svg")).toString();
  } catch (e) {
    // No-op
  }

  let fileInfo = null;

  readdirSync(dirname).some((file) => {
    const ext = extname(file);
    const filename = basename(file, ext);

    if (filename === "example") {
      fileInfo = {
        name: filename + ext,
        mimeType: mime.lookup(ext),
      };

      return true;
    }

    return false;
  });

  if (!fileInfo) {
    throw new Error("Could not find an example document for " + dirname);
  }

  const isPublic =
    process.env.NODE_ENV !== "production" ||
    !PRIVATE_EXAMPLES_DIR_NAMES.includes(fileSystemPath);

  return {
    name,
    title,
    description,
    fileSystemPath,
    icon,
    fileInfo,
    isPrivate: isPublic ? undefined : true,
  };
}

function extractTitleAndDescriptionFromReadme(fileSystemPath) {
  const markdownTree = markdown.parse(
    readFileSync(join(EXAMPLES_PATH, fileSystemPath, "README.md")).toString()
  );

  const titleIndex = markdownTree.findIndex((value) => value[0] === "header");

  const title = markdownTree[titleIndex][2];

  // Remove the title from the remaining markdownTree
  markdownTree.splice(titleIndex, 1);

  return [title, markdown.renderJsonML(markdown.toHTMLTree(markdownTree))];
}

module.exports = {
  generatePages,
  generateExamplesIndex,
  parseExamples,
};
